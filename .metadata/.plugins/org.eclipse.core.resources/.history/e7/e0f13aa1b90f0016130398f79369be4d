package com.ubf.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

import org.json.JSONException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fitbit.api.FitbitAPIException;
import com.ubf.fitbit.FitbitConsoleApplication;
import com.ubf.kafka.UBFKafkaProducer;
/*
 * This is controller class.
 */
@RestController
@RequestMapping(value = "/services")
public class ServiceController {
	//static block to read all the properties from tomcat conf folder.
	//place the myconfig.properties file in the conf folder of tomcat server.
	static String verifyId;
	 Properties prop;
	{
		 prop = new Properties();
		try {
			File configDir = new File(System.getProperty("catalina.base"), "conf");
			File configFile = new File(configDir, "myconfig.properties");
			InputStream stream = new FileInputStream(configFile);
			Properties props = new Properties();
			props.load(stream);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * The method read data from fitbit and send to the kafka server
	 */
	@RequestMapping(value = "/notify", method = RequestMethod.POST, headers="content-type=multipart/form-data")
	public Object sendDataToKafka() throws InterruptedException, ExecutionException, JsonProcessingException, FitbitAPIException, JSONException {
		System.out.println("********service call*********");
		UBFKafkaProducer.sendMessages(FitbitConsoleApplication.getFitBitData());
		return new ResponseEntity<String>(HttpStatus.NO_CONTENT); 
	
	}
	
	/*
	 * The method will be used to validate the subscription
	 */
	@RequestMapping(value = "/notify", method = RequestMethod.GET)
	public Object verifySubscription(@RequestParam(value = "verify", required = false) String verify) throws InterruptedException, ExecutionException, JsonProcessingException, FitbitAPIException, JSONException {
		System.out.println("********verify*********");
		if(verify != null){
		if(verify.equals(prop.getProperty("subscriberCode")))
		return new ResponseEntity<String>(HttpStatus.NO_CONTENT); 
		else
			return new ResponseEntity<String>(HttpStatus.NOT_FOUND); 
		
		}
		return new ResponseEntity<String>(HttpStatus.NO_CONTENT); 
	}
	
}