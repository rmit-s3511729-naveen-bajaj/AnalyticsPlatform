package com.bda.realtime;

import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.server.handler.ResourceHandler;
import org.eclipse.jetty.servlet.ServletHolder;

public class Main {

	public static void main(String[] args) throws Exception {
		// Create a basic Jetty server object that will listen on port 8080.  Note that if you set this to port 0
        // then a randomly available port will be assigned that you can either look in the logs for the port,
        // or programmatically obtain it for use in test cases.
		Server server = new Server(8080);
		
		// Setup the basic application "context" for this application at "/"
		// This is also known as the handler tree (in jetty speak)
		        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
		        context.setContextPath("/");
		        server.setHandler(context);

		// Add a websocket to a specific path spec
		        ServletHolder holderEvents = new ServletHolder("ws-events", EventServlet.class);
		        context.addServlet(holderEvents, "/ratesrv/*");

		// Create the ResourceHandler. It is the object that will actually handle the request for a given file. It is
        // a Jetty Handler object so it is suitable for chaining with other handlers as you will see in other examples.
		ResourceHandler resource_handler = new ResourceHandler();
		
		// Configure the ResourceHandler. Setting the resource base indicates where the files should be served out of.
        // In this example it is the current directory but it can be configured to anything that the jvm has access to.
		resource_handler.setDirectoriesListed(true);
		resource_handler.setWelcomeFiles(new String[]{"index.html"});
		resource_handler.setResourceBase("src/main/webapp/");
		
//		WebSocketHandler wsHandler = new WebSocketHandler()
//	    {
//	        @Override
//	        public void configure(WebSocketServletFactory factory)
//	        {
//	            factory.register(WebSocketServer.class);
//	        }
//	    };

		// Add the ResourceHandler to the server.
		HandlerList handlers = new HandlerList();
		handlers.setHandlers(new Handler[]{resource_handler,wsHandler, new DefaultHandler()});
		server.setHandler(handlers);



		server.start();
		server.join();
	}
}
