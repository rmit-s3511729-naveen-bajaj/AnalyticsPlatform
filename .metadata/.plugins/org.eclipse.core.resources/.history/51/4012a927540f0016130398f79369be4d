package com.bda.realtime;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;

import org.apache.commons.lang.StringUtils;
import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.*;


/**
 * Created by ericwang on 17/02/2016.
 */
@WebSocket
public class StreamSocket {


    private static final Logger LOG = LoggerFactory.getLogger(StreamSocket.class);

    private static final Set<Session> clients = Collections.synchronizedSet(new HashSet<Session>());

    private Session session;


    private ClientCache clientCache;



   

    // called when the socket connection with the browser is established
    @OnWebSocketConnect
    public void handleConnect(Session session) {
        this.session = session;
        clients.add(session);
        LOG.info(session.getRemoteAddress().getHostString() + " connected~~~~~");
    }

    // called when the connection closed
    @OnWebSocketClose
    public void handleClose(int statusCode, String reason) {
        clients.remove(session);
        LOG.info("Connection closed with" + session.getRemoteAddress().getHostString() + " statusCode=" + statusCode + ", reason=" + reason);
    }

//    final private Gson gson = new Gson();

    // called when a message received from the browser
    @OnWebSocketMessage
    public void handleMessage(String message){
       System.out.println("111111");
    }


  
    // called in case of an error
    @OnWebSocketError
    public void handleError(Throwable error) {
        error.printStackTrace();
    }


}
