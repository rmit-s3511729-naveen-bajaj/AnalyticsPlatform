package com.ubf.fitbit;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.joda.time.LocalDate;
import org.json.JSONException;
import org.json.JSONObject;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fitbit.api.FitbitAPIException;
import com.fitbit.api.client.FitbitAPIEntityCache;
import com.fitbit.api.client.FitbitApiClientAgent;
import com.fitbit.api.client.FitbitApiCredentialsCache;
import com.fitbit.api.client.FitbitApiCredentialsCacheMapImpl;
import com.fitbit.api.client.FitbitApiEntityCacheMapImpl;
import com.fitbit.api.client.FitbitApiSubscriptionStorage;
import com.fitbit.api.client.FitbitApiSubscriptionStorageInMemoryImpl;
import com.fitbit.api.client.LocalUserDetail;
import com.fitbit.api.client.service.FitbitAPIClientService;
import com.fitbit.api.common.model.activities.Activities;
import com.fitbit.api.common.model.body.Body;
import com.fitbit.api.common.model.bp.Bp;
import com.fitbit.api.common.model.glucose.Glucose;
import com.fitbit.api.common.model.heart.Heart;
import com.fitbit.api.common.model.sleep.Sleep;
import com.fitbit.api.common.model.user.UserInfo;
import com.fitbit.api.common.service.FitbitApiService;
import com.fitbit.api.model.APIResourceCredentials;
import com.fitbit.api.model.FitbitUser;

/*
 * The class will fetch data from fitbit using fitbit developer api.
 */
public class FitbitConsoleApplication {
	private static final String apiBaseUrl = "api.fitbit.com";
	private static  String fitbitSiteBaseUrl ;
	private static  String clientConsumerKey ;
	private static  String clientSecret ;
	
	//static block to read all the properties from tomcat conf folder.
	//place the myconfig.properties file in the conf folder of tomcat server.
	static Properties prop;
	static{
		 prop = new Properties();
		try {
			File configDir = new File(System.getProperty("catalina.base"), "conf");
			File configFile = new File(configDir, "myconfig.properties");
			InputStream stream = new FileInputStream(configFile);
			Properties props = new Properties();
			props.load(stream);
			fitbitSiteBaseUrl=prop.getProperty("fitbitSiteBaseUrl");
			clientConsumerKey=prop.getProperty("clientConsumerKey");
			clientSecret=prop.getProperty("clientSecret");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	

	public static String getFitBitData() throws FitbitAPIException, JsonProcessingException, JSONException{
		FitbitApiCredentialsCache credentialsCache = new FitbitApiCredentialsCacheMapImpl();
		FitbitAPIEntityCache entityCache = new FitbitApiEntityCacheMapImpl();
		FitbitApiSubscriptionStorage subscriptionStore = new FitbitApiSubscriptionStorageInMemoryImpl();
		FitbitAPIClientService<FitbitApiClientAgent> fitbit = new FitbitAPIClientService<FitbitApiClientAgent>(
				new FitbitApiClientAgent(apiBaseUrl, fitbitSiteBaseUrl,
						credentialsCache), clientConsumerKey, clientSecret,
				credentialsCache, entityCache, subscriptionStore);

		final LocalUserDetail localUser = new LocalUserDetail(prop.getProperty("user"));
		String url = fitbit.getResourceOwnerAuthorizationURL(localUser, "");
		System.out.println("Open " + url);
		APIResourceCredentials creds = fitbit
				.getResourceCredentialsByUser(localUser);
		creds.setAccessToken(prop.getProperty("accessToken"));
		creds.setAccessTokenSecret(prop.getProperty("accessTokenSecret"));

		UserInfo profile = fitbit.getClient().getUserInfo(localUser);
		System.out.println(profile.getDisplayName() + ", member since "
				+ profile.getMemberSince());

		LocalDate date = FitbitApiService.getValidLocalDateOrNull(prop.getProperty("localDate"));
		Sleep sleep = fitbit.getClient().getSleep(localUser,
				FitbitUser.CURRENT_AUTHORIZED_USER, date);
		Body body  = fitbit.getClient().getBody(localUser,FitbitUser.CURRENT_AUTHORIZED_USER, date);
		Heart heart = fitbit.getClient().getLoggedHeartRate(localUser,FitbitUser.CURRENT_AUTHORIZED_USER, date);
		Bp bp = fitbit.getClient().getLoggedBp(localUser,FitbitUser.CURRENT_AUTHORIZED_USER, date);
		Glucose glucose = fitbit.getClient().getLoggedGlucose(localUser,FitbitUser.CURRENT_AUTHORIZED_USER, date);
		Activities act = fitbit.getActivities(localUser, date);

		ObjectMapper mapper = new ObjectMapper();
		//		System.out.println(fitbit.getClient());

		JSONObject dataJson = new JSONObject();
		dataJson.put("sleep", new JSONObject(mapper.writeValueAsString(sleep)));
		dataJson.put("body", new JSONObject(mapper.writeValueAsString(body)));
		dataJson.put("profile", new JSONObject(mapper.writeValueAsString(profile)));
		dataJson.put("heart", new JSONObject(mapper.writeValueAsString(heart)));
		dataJson.put("bp", new JSONObject(mapper.writeValueAsString(bp)));
		dataJson.put("glucose", new JSONObject(mapper.writeValueAsString(glucose)));
		dataJson.put("activities", new JSONObject(mapper.writeValueAsString(act)));

		System.out.println("data----"+dataJson.toString());
		return dataJson.toString();
	}

	public static void main(String[] args) throws JsonProcessingException, FitbitAPIException, JSONException {
		getFitBitData();
	}
	
}
